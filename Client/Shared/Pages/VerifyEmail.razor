@using Dnsk.Client.Lib
@using System.Text.RegularExpressions
@using Dnsk.Common
@using AuthValidator = Dnsk.Client.Lib.AuthValidator
<div class="root jc-c ai-c">
    <RadzenCard class="flx col jc-c ai-c p-3 w-25">
        <RadzenText TextStyle="TextStyle.H4" TagName="TagName.H2" class="m-t-0">
            Verify Email
        </RadzenText>
        @if (_verifying)
        {
            <RadzenText TextStyle="TextStyle.Body1" TagName="TagName.P" class="m-b-1">
                Verifying your email.
            </RadzenText>
        }
        else
        {
            @if (_success)
            {
                <RadzenText TextStyle="TextStyle.Body1" TagName="TagName.P" class="m-b-1">
                    Thank you for verifying your email.
                </RadzenText>
                <RadzenText TextStyle="TextStyle.Body1" TagName="TagName.P" class="m-b-1">
                    You may now sign in.
                </RadzenText>
            }
            else
            {
                <RadzenText TextStyle="TextStyle.Body1" TagName="TagName.P" class="m-b-1 .rz-color-danger">
                    Something went wrong.
                </RadzenText>
            }
        }
        <RadzenButton ButtonType="ButtonType.Button" BusyText="Verifying" IsBusy="_verifying" Text="Sign In" Click="SignIn"/>
    </RadzenCard>
</div>

@inject IAuthService Auth;
@inject NavigationManager Nav;
@code{

    [Parameter]
    public string Email { get; set; } = "";

    [Parameter]
    public string Code { get; set; } = "";

    private bool _verifying = false;
    private bool _success = false;

    protected override async Task OnInitializedAsync()
    {
        _verifying = true;
        try
        {
            await Auth.VerifyEmail(Email, Code);
            _success = true;
        }
        finally
        {
            _verifying = false;
        }
    }

    private void SignIn()
    {
        if (!_verifying && _success)
        {
            Nav.NavigateTo("sign_in");
        }
    }
}