@using Dnsk.Client.Lib
@using System.Text.RegularExpressions
@using Dnsk.Common
<div class="root jc-c ai-c">
    <RadzenCard class="p-3">
        <RadzenText TextStyle="TextStyle.H5" TagName="TagName.H2" class="mb-4">
            Sign In
        </RadzenText>
        <RadzenTemplateForm
            TItem="SignInModel"
            Data="Model"
            Submit="Submit"
            class="flx col ai-stretch g-1">
            <div class="flx col ai-stretch">
                <RadzenLabel class="m-b-1" Component="Email" Text="Email"/>
                <RadzenTextBox Name="Email" @bind-Value="@Model.Email"/>
                <RadzenCustomValidator Validator="EmailValidator" Component="Email" Popup="true" Text="Invalid email"></RadzenCustomValidator>
            </div>
            <div class="flx col ai-stretch">
                <RadzenLabel class="m-b-1" Component="Password" Text="Password"/>
                <RadzenPassword Name="Password" @bind-Value="@Model.Pwd"/>
                <RadzenCustomValidator Validator="PasswordValidator" Component="Password" Popup="true" Text="Invalid password"></RadzenCustomValidator>
            </div>
            <RadzenButton ButtonType="ButtonType.Submit" Text="Sign In"/>
            <div class="flx jc-sb">
                <RadzenLink Path="register" Text="Register"></RadzenLink>
                <RadzenLink Path="reset_pwd" Text="Reset Password"></RadzenLink>
            </div>
        </RadzenTemplateForm>
    </RadzenCard>
</div>

@inject IAuthService _auth;
@code{

    class SignInModel
    {
        public string Email { get; set; }
        public string Pwd { get; set; }
    }

    private SignInModel Model = new ();

    private void Submit()
    {
        _auth.SignIn(Model.Email, Model.Pwd);
    }

    private (bool Valid, List<string> SubRules) EmailValidator(IRadzenFormComponent component)
    {
        var res = (Valid: true, SubRules: new List<string>());
        var str = component.GetValue() as string ?? "";
        if (!Regex.IsMatch(str, @"^[^@]+@[^@]+\.[^@]+$"))
        {
            res.Valid = false;
        }
        return res;
    }

    private (bool Valid, List<string> SubRules) PasswordValidator(IRadzenFormComponent component)
    {
        var res = (Valid: true, SubRules: new List<string>());
        var str = component.GetValue() as string ?? "";
        if (!Regex.IsMatch(str, ".{8,}"))
        {
            res.Valid = false;
            res.SubRules.Add("less than 8 characters");
        }
        if (!Regex.IsMatch(str, "[a-z]"))
        {
            res.Valid = false;
            res.SubRules.Add("no lowercase character");
        }
        if (!Regex.IsMatch(str, "[A-Z]"))
        {
            res.Valid = false;
            res.SubRules.Add("no uppercase character");
        }
        if (!Regex.IsMatch(str, "[0-9]"))
        {
            res.Valid = false;
            res.SubRules.Add("no digit");
        }
        if (!Regex.IsMatch(str, "[^a-zA-Z0-9 ]"))
        {
            res.Valid = false;
            res.SubRules.Add("no special character");
        }
        return res;
    }
}