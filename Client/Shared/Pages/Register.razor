@using Dnsk.Client.Lib
@using System.Text.RegularExpressions
@using Dnsk.Common
@using AuthValidator = Dnsk.Client.Lib.AuthValidator
<div class="root jc-c ai-c">
    <RadzenCard class="p-3 w-25">
        <RadzenText TextStyle="TextStyle.H4" TagName="TagName.H2" class="m-t-0">
            Register
        </RadzenText>
        <RadzenTemplateForm
            TItem="RegisterModel"
            Data="_model"
            Submit="Submit"
            class="flx col ai-stretch g-1">
            <div class="flx col ai-stretch">
                <RadzenLabel class="m-b-0q" Component="Email" Text="Email"/>
                <RadzenTextBox Name="Email" @bind-Value="@_model.Email" Disabled="_registering"/>
                <RadzenCustomValidator Validator="EmailValidator" Component="Email" Popup="true" Text="Invalid email"></RadzenCustomValidator>
            </div>
            <div class="flx col ai-stretch">
                <RadzenLabel class="m-b-0q" Component="Password" Text="Password"/>
                <RadzenPassword Name="Password" @bind-Value="@_model.Pwd" Disabled="_registering"/>
                <RadzenCustomValidator Validator="PwdValidator" Component="Password" Popup="true" Text="Invalid password"></RadzenCustomValidator>
            </div>
            <div class="flx col ai-stretch">
                <RadzenLabel class="m-b-0q" Component="ConfirmPassword" Text="Confirm Password"/>
                <RadzenPassword Name="ConfirmPassword" @bind-Value="@_model.ConfirmPwd" Disabled="_registering"/>
                <RadzenCustomValidator Validator="ConfirmPasswordValidator" Component="ConfirmPassword" Popup="true" Text="Passwords don't match"></RadzenCustomValidator>
            </div>
            <RadzenButton ButtonType="ButtonType.Submit" BusyText="Registering" IsBusy="_registering" Text="Register"/>
            <RadzenLink Path="sign_in" Text="Sign In"></RadzenLink>
        </RadzenTemplateForm>
    </RadzenCard>
</div>

@inject IAuthService Auth;
@code{

    class RegisterModel
    {
        public string Email { get; set; } = "";
        public string Pwd { get; set; } = "";
        public string ConfirmPwd { get; set; } = "";
    }

    private RegisterModel _model = new ();
    private bool _registering = false;
    private bool _success = false;

    private async Task Submit()
    {
        _registering = true;
        try
        {
            await Auth.Register(_model.Email, _model.Pwd);
            _success = true;
        }
        finally
        {
            _registering = false;
        }
    }

    private ValidationResult EmailValidator(IRadzenFormComponent component)
        => AuthValidator.EmailValidator(component);

    private ValidationResult PwdValidator(IRadzenFormComponent component)
        => AuthValidator.PwdValidator(component);

    private ValidationResult ConfirmPasswordValidator(IRadzenFormComponent component)
        => new ValidationResult()
        {
            Valid = (component.GetValue() as string ?? "") == _model.Pwd
        };
}