@using Dnsk.Client.Lib
@using System.Text.RegularExpressions
@using Dnsk.Common
<div class="root jc-c ai-c">
    <RadzenCard class="p-3 w-25">
        <RadzenText TextStyle="TextStyle.H4" TagName="TagName.H2" class="m-t-0">
            Register
        </RadzenText>
        <RadzenTemplateForm
            TItem="RegisterModel"
            Data="Model"
            Submit="Submit"
            class="flx col ai-stretch g-1">
            <div class="flx col ai-stretch">
                <RadzenLabel class="m-b-0q" Component="Email" Text="Email"/>
                <RadzenTextBox Name="Email" @bind-Value="@Model.Email"/>
                <RadzenCustomValidator Validator="EmailValidator" Component="Email" Popup="true" Text="Invalid email"></RadzenCustomValidator>
            </div>
            <div class="flx col ai-stretch">
                <RadzenLabel class="m-b-0q" Component="Password" Text="Password"/>
                <RadzenPassword Name="Password" @bind-Value="@Model.Pwd"/>
                <RadzenCustomValidator Validator="PwdValidator" Component="Password" Popup="true" Text="Invalid password"></RadzenCustomValidator>
            </div>
            <div class="flx col ai-stretch">
                <RadzenLabel class="m-b-0q" Component="ConfirmPassword" Text="Confirm Password"/>
                <RadzenPassword Name="ConfirmPassword" @bind-Value="@Model.ConfirmPwd"/>
                <RadzenCustomValidator Validator="ConfirmPasswordValidator" Component="ConfirmPassword" Popup="true" Text="Passwords don't match"></RadzenCustomValidator>
            </div>
            <RadzenButton ButtonType="ButtonType.Submit" BusyText="Registering" IsBusy="Submitting" Text="Register"/>
            @* <div class="flx jc-sb"> *@
                <RadzenLink Path="sign_in" Text="Sign In"></RadzenLink>
            @* </div> *@
        </RadzenTemplateForm>
    </RadzenCard>
</div>

@inject IAuthService _auth;
@code{

    class RegisterModel
    {
        public string Email { get; set; }
        public string Pwd { get; set; }
        public string ConfirmPwd { get; set; }
    }

    private RegisterModel Model = new ();

    private bool Submitting = false;

    private async Task Submit()
    {
        Submitting = true;
        try
        {
            await _auth.Register(Model.Email, Model.Pwd);
        }
        catch
        {
            // empty catch to avoid using StateHasChanged()
            // in finally after updating the busy bool flag
        }
        Submitting = false;
    }

    private (bool Valid, List<string> SubRules) EmailValidator(IRadzenFormComponent component)
        => AuthValidator.EmailValidator(component);

    private (bool Valid, List<string> SubRules) PwdValidator(IRadzenFormComponent component)
        => AuthValidator.PwdValidator(component);

    private (bool Valid, List<string> SubRules) ConfirmPasswordValidator(IRadzenFormComponent component)
        => (Valid: (component.GetValue() as string ?? "") == Model.Pwd, SubRules: new List<string>());
}