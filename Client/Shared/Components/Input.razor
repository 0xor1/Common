@using System.ComponentModel.DataAnnotations
@using Dnsk.Common
@using Humanizer
@using System.ComponentModel
<div class="root">
    @if (!Label.IsNullOrWhiteSpace() && T is not (Type.Checkbox or Type.Radio))
    {
        /* non radio/checkbox controls have labels before on the line above */
        <div class="label">
            <label for="@Name">@Label</label>
        </div>
    }
    <div class="input @(Horizontal? "horizontal": "")">
        @switch (T)
        {
            case Type.TextArea:
                <textarea name="@Name" rows="@TextAreaRows"></textarea>
                break;
            case Type.Select:
                <select name="@Name">
                    @foreach (var opt in Options.NotNull())
                    {
                        <option value="@opt.Key">@opt.Display</option>
                    }
                </select>
                break;
            case Type.Checkbox:
            case Type.Radio:
                @foreach (var opts in Options.NotNull())
                {
                    // individual requireds for checkboxes 
                    @if (opts.Required)
                    {
                        <input name="@Name" type="@(T == Type.DateTime ? "datetime-local" : T.CssClass())" required/>
                    }
                    else
                    {
                        <input name="@Name" type="@(T == Type.DateTime ? "datetime-local" : T.CssClass())"/>
                    }
                    <label for="@Name">@Label</label>
                }
                break;
            default:
                <input name="@Name" type="@(T == Type.DateTime ? "datetime-local" : T.CssClass())" min="@Min" max="@Max" minlength="@Min" maxlength="@Max" step="@Step" required/>
                break;
        }
    </div>
    <div class="invalid-msg">
        <span class="all-e">@InvalidMessage</span>
    </div>
</div>

@code{

    public record Option(string Key, string Display, bool Required = false);
    public record CheckResult(string Key, bool Checked);

    public enum ValidationStatus
    {
        None,
        Ok,
        Invalid,
    }

    public enum Type
    {
        Checkbox,
        Color,
        Date,
        DateTime,
        Decimal,
        Email,
        File,
        Image,
        Int,
        Month,
        Password,
        Radio,
        Range,
        Search,
        Tel,
        Text,
        Time,
        Url,
        Week,
        // non input tags
        TextArea,
        Select
    }

    [Parameter]
    [EditorRequired]
    public string Name { get; set; }

    [Parameter]
    [EditorRequired]
    public Type T { get; set; }
    
    [Parameter]
    public string Label { get; set; }

    [Parameter]
    public string InvalidMessage { get; set; }

    // specify for layout of radio and checkboxes in horizontal order
    [Parameter]
    public bool Horizontal { get; set; }

    [Parameter]
    public bool Required { get; set; }
    
    [Parameter]
    public decimal? Min { get; set; }
    
    [Parameter]
    public decimal? Max { get; set; }
    
    [Parameter]
    public decimal? Step { get; set; }
    
    [Parameter]
    public DateTime? DateMin { get; set; }
    
    [Parameter]
    public DateTime? DateMax { get; set; }

    [Parameter]
    public int TextAreaRows { get; set; } = 5;

    // options for checkbox, radio and select options
    [Parameter]
    public List<Option>? Options { get; set; }

    // for checkbox
    [Parameter]
    public List<CheckResult>? Checked { get; set; }
    [Parameter]
    public EventCallback<List<(string Key, bool Checked)>?> CheckedChanged { get; set; }

    // for all string, select and radio inputs and textarea
    [Parameter]
    public string? String { get; set; }
    [Parameter]
    public EventCallback<string?> StringChanged { get; set; }

    // int
    [Parameter]
    public int? Int { get; set; }
    [Parameter]
    public EventCallback<int?> IntChanged { get; set; }

    // decimal
    [Parameter]
    public decimal? Decimal { get; set; }
    [Parameter]
    public EventCallback<decimal?> DecimalChanged { get; set; }

    // date and datetime
    [Parameter]
    public DateTime? DateTime { get; set; }
    [Parameter]
    public EventCallback<DateTime?> DateTimeChanged { get; set; }
    
    // validation
    [Parameter]
    public ValidationStatus? Status { get; set; }
    [Parameter]
    public EventCallback<ValidationStatus?> StatusChanged { get; set; }
    
    public override async Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);
        // validate certain params are set for certain types
        switch (T)
        {
            case Type.Checkbox:
            case Type.Radio:
            case Type.Select:
                Throw.SetupIf(Options?.Any() ?? true, $"no {nameof(Options)} specified for {T.Humanize()} input");
                break;
        }
        // validate certain params aren't set for certain types
        if (T is not (Type.Date or Type.DateTime))
        {
            // DateMin and DateMax are only valid for Date and DateTime types
            Throw.SetupIf(T is not (Type.Date or Type.DateTime) && (DateMin.IsntNull() || DateMax.IsntNull()), $"{nameof(DateMin)} and {nameof(DateMax)} are not valid for a {T.Humanize()} input");
        }

    }

    private void OnChanged(ChangeEventArgs args)
    {
        // central on change handler
    }
    

}